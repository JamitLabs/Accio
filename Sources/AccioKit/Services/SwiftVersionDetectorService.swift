import Foundation
import HandySwift
import SwiftShell

enum SwiftVersionDetectorError: Error {
    case swiftVersionCommandError
    case parsingError
}

class SwiftVersionDetectorService {
    static let shared = SwiftVersionDetectorService()

    func getCurrentSwiftVersion() throws -> String {
        let result = run(bash: "swift --version")
        guard result.succeeded else {
            throw SwiftVersionDetectorError.swiftVersionCommandError
        }

        return try convertToSwiftVersion(swiftVersionOutput: result.stdout)
    }

    func convertToSwiftVersion(swiftVersionOutput: String) throws -> String {
        do {
            let regex = try Regex(#"Apple Swift version ([\d.]*) \(swiftlang"#)
            guard let versionNumber = regex.firstMatch(in: swiftVersionOutput)?.captures.first ?? nil else {
                throw SwiftVersionDetectorError.parsingError
            }

            return "Swift-\(versionNumber)"
        }
        catch {
            throw SwiftVersionDetectorError.parsingError
        }
    }

    func detectSwiftVersion(ofFrameworkProduct frameworkProduct: FrameworkProduct) throws -> String {
        let swiftHeaderFileUrl = frameworkProduct.frameworkDirUrl.appendingPathComponent(
            "Headers/\(frameworkProduct.libraryName)-Swift.h"
        )

        if
            FileManager.default.fileExists(atPath: swiftHeaderFileUrl.path),
            let swiftHeaderFileContents = try? String(contentsOf: swiftHeaderFileUrl, encoding: .utf8)
        {
            do {
                let regex = try Regex(#"// Generated by Apple Swift version ([\d.]*) "#)
                guard let versionNumber = regex.firstMatch(in: swiftHeaderFileContents)?.captures.first ?? nil else {
                    throw SwiftVersionDetectorError.parsingError
                }

                return "Swift-\(versionNumber)"
            }
            catch {
                throw SwiftVersionDetectorError.parsingError
            }
        }

        throw SwiftVersionDetectorError.parsingError
    }
}
